#!/usr/bin/env python3
import os
import types
import socket
import select
import logging

from hashlib import md5
from collections import deque
from http.client import HTTPConnection, HTTPSConnection
from ssl import SSLWantReadError, SSLWantWriteError
from re import search

TRAP_IO_WAIT = 1
BUF_SIZE = 65536
CACHE_DIR = None

read_events = {}
write_events = {}
loop_tasks = deque()
log = logging.getLogger('cache-proxy')


@types.coroutine
def wait_io(sock, event, fn, *args):
    # yield TRAP_RESCHEDULE,
    while True:
        try:
            return fn(*args)
        except SSLWantWriteError:
            yield TRAP_IO_WAIT, sock, write_events
        except SSLWantReadError:
            yield TRAP_IO_WAIT, sock, read_events
        except (BlockingIOError, InterruptedError):
            yield TRAP_IO_WAIT, sock, event


def recv(sock, size, flags=0):
    return wait_io(sock, read_events, sock.recv, size, flags)


def send(sock, data, flags=0):
    return wait_io(sock, write_events, sock.send, data, flags)


def accept(sock):
    return wait_io(sock, read_events, sock.accept)


async def sendall(sock, data):
    while data:
        size = await send(sock, data)
        data = data[size:]


def run_loop():
    while True:
        while loop_tasks:
            current = loop_tasks.popleft()
            try:
                t, *args = current.send(None)
            except StopIteration:
                pass
            except Exception:
                log.exception('Unhandled coro error')
            else:
                if t == TRAP_IO_WAIT:
                    args[1][args[0]] = current

        if not read_events and not write_events:
            break

        r, w, _ = select.select(read_events, write_events, [])
        for it in r:
            loop_tasks.append(read_events.pop(it))
        for it in w:
            loop_tasks.append(write_events.pop(it))


def spawn(coro):
    loop_tasks.append(coro)


async def read_until(sock, sentinel, max_size=65536):
    size = 0
    read_size = min(max_size, BUF_SIZE)
    buf = bytearray(max_size + read_size)
    mv = memoryview(buf)
    while size < max_size:
        count = await wait_io(sock, read_events, sock.recv_into, mv[size:], read_size)
        if not count:
            raise Exception('Sentinel not found')
        size += count
        pos = buf.find(sentinel, 0, size)
        if pos >= 0:
            return buf[:size], pos

    raise Exception('Sentinel not found')


def parse_http_line(data):
    line, _, headers = data.partition(b'\r\n')
    return line.split(None, 2), headers


def get_header_value(data, name, default=None):
    m = search(rb'(?i)\r\n%s:\s*(.+)\s*\r\n' % name, data)
    if m:
        return m.group(1)
    return default


async def make_request(method, url):
    proto, _, host, qs = url.split(b'/', 3)
    cls = HTTPConnection if proto == b'http:' else HTTPSConnection
    h = cls(host.decode(), timeout=5)
    h.connect()
    h.sock.setblocking(False)
    await sendall(
        h.sock, b'%s /%s HTTP/1.1\r\nHost: %s\r\nConnection: close\r\n\r\n' % (
            method, qs, h.host.encode()))
    return h


def get_cache_path(url):
    proto, _, host, qs = url.split(b'/', 3)
    fname, _, _ = qs.partition(b'?')
    fname = fname.rstrip(b'/').split(b'/')[-1]
    return os.path.join(os.fsencode(CACHE_DIR), b'%s.%s.%s' % (host, fname, md5(url).hexdigest()[:10].encode()))


async def handle_client(client):
    req, pos = await read_until(client, b'\r\n\r\n')
    assert len(req) - pos == 4
    (method, url, _), _ = parse_http_line(req)

    fname = get_cache_path(url)
    if os.path.exists(fname):
        print('HIT', url)
        with open(fname, 'rb') as fd:
            size = os.fstat(fd.fileno()).st_size
            headers = [b'Content-Length: %d' % size,
                       b'Connection: Close',
                       b'Content-Type: application/octet-stream']
            await sendall(client, b'HTTP/1.1 200 OK\r\n%s\r\n\r\n' % b'\r\n'.join(headers))
            while size > 0:
                count = await wait_io(client, write_events, os.sendfile,
                                      client.fileno(), fd.fileno(), None, size)
                size -= count
    else:
        print('MISS', method, url)
        h = await make_request(method, url)
        resp, offset = await read_until(h.sock, b'\r\n\r\n')
        (_, status_code, _), resp_headers = parse_http_line(resp)

        if status_code == b'301':
            h.sock.close()
            new_url = get_header_value(resp_headers, b'location')
            h = await make_request(b'GET', new_url)
            resp, offset = await read_until(h.sock, b'\r\n\r\n')
            (_, status_code, _), _ = parse_http_line(resp)

        if status_code == b'200':
            fd = open(fname + b'.tmp', 'wb')
        else:
            fd = None

        if fd:
            fd.write(resp[offset+4:])
        await sendall(client, resp)

        while True:
            data = await recv(h.sock, BUF_SIZE)
            if not data:
                break
            if fd:
                fd.write(data)
            await sendall(client, data)

        h.sock.close()
        if fd:
            fd.close()
            os.rename(fname + b'.tmp', fname)

    # print('END', client)


def serve(bind):
    sock = socket.create_server(bind, backlog=128)
    sock.setblocking(False)

    async def forever():
        while True:
            s, _ = await accept(sock)
            s.setblocking(False)
            spawn(handle_client(s))

    spawn(forever())
    run_loop()


def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--bind', metavar='[host]:port', default='127.0.0.1:3128')
    parser.add_argument('cache_dir', metavar='cache-dir')

    logging.basicConfig(level='INFO')

    args = parser.parse_args()

    host, _, port = args.bind.partition(':')
    if not host:
        host = '127.0.0.1'
    if not port:
        port = 3128

    global CACHE_DIR
    CACHE_DIR = args.cache_dir
    os.makedirs(CACHE_DIR, exist_ok=True)

    serve((host, int(port)))


if __name__ == '__main__':
    main()
