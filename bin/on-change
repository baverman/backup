#!/usr/bin/python3
import io
import sys
import time
import os.path
import select
import signal
import logging

from ctypes import c_int, CDLL, get_errno, c_uint32, c_char_p, Structure, sizeof, cast
from subprocess import Popen
from threading import Thread, Event

log = logging.getLogger()
libc = CDLL('libc.so.6', use_errno=True)
processes = set()


class INotifyEvent(Structure):
    _fields_ = [
        ('wd', c_int),
        ('mask', c_uint32),
        ('cookie', c_uint32),
        ('len', c_uint32),
    ]


def handle_error(value):
    if value == -1:
        errno = get_errno()
        raise OSError(errno, os.strerror(errno))
    return value


def prepare(fn, args=None, result=handle_error):
    if args:
        fn.argtypes = args
    if result:
        fn.restype = result
    return fn


inotify_init = prepare(libc.inotify_init)
inotify_add_watch = prepare(libc.inotify_add_watch, args=[c_int, c_char_p, c_uint32])

IN_MODIFY	 = 0x00000002
IN_MOVED_FROM	 = 0x00000040
IN_MOVED_TO      = 0x00000080
IN_MOVE		 = (IN_MOVED_FROM | IN_MOVED_TO)
IN_CREATE	 = 0x00000100
IN_DELETE	 = 0x00000200


class Reader(object):
    def start(self, receiver):
        self.receiver = receiver
        receiver.send(None)
        gen = self.feeder()
        gen.send(None)
        return gen.send

    def read(self, size):
        self.size = size

    def feeder(self):
        buf = b''
        while True:
            data = yield
            buf += data
            while len(buf) >= self.size:
                sz = self.size
                self.receiver.send(buf[:sz])
                buf = buf[sz:]


def protocol(fn):
    def inner(*args, **kwargs):
        reader = Reader()
        receiver = fn(reader, *args, **kwargs)
        return reader.start(receiver)
    return inner


def get_changes(fd, entries, timeout=0.3):

    @protocol
    def inotify_proto(reader):
        slen = sizeof(INotifyEvent)
        while True:
            data = yield reader.read(slen)
            e = INotifyEvent.from_buffer_copy(data)
            if e.len:
                data = yield reader.read(e.len)
                name = cast(data, c_char_p).value
                dname = emap[e.wd]
                if dname != b'.':
                    name = os.path.join(dname, name)
            else:
                name = emap[e.wd]

            changed_names.add(name)

    os.set_blocking(fd, False)
    emap = {}
    for it in entries:
        try:
            eid = inotify_add_watch(fd, it, IN_CREATE | IN_MODIFY | IN_MOVE | IN_DELETE)
        except (PermissionError, FileNotFoundError):
            pass
        else:
            emap[eid] = it

    proto = inotify_proto()
    changed_names = set()
    while True:
        try:
            data = os.read(fd, 4096)
            proto(data)
        except BlockingIOError:
            rd, _, _ = select.select([fd], [], [], timeout)
            if rd:
                continue
            yield changed_names
            changed_names.clear()


def start_proc(cmd):
    proc = Popen(cmd)
    processes.add(proc)
    return proc


def wait_proc(proc):
    proc.wait()
    processes.remove(proc)
    return proc.returncode == 0


def oneshot(cmd):
    return wait_proc(start_proc(cmd))


def daemon(eset, cmd):
    proc = start_proc(cmd)
    while True:
        eset.wait(None)
        proc.terminate()
        wait_proc(proc)
        proc = start_proc(cmd)


def serve(eset, args):
    import socket
    from functools import partial
    from http.server import SimpleHTTPRequestHandler, HTTPStatus

    requests = set()

    FRAME = b'''
    <html>
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            body {
                margin: 0;
            }

            .container {
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
                overflow: hidden;
            }

            #cframe {
                width: 100%;
                height: 100%;
                border: none;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <iframe id="cframe" src=""></iframe>
        </div>

        <script>
            function get_path(loc) {
                return loc.pathname + loc.search + loc.hash;
            }

            function init() {
                var frame = document.getElementById('cframe');
                var url = window.location.pathname + window.location.search;
                var is_changing = false;
                var boo;

                function frame_changed() {
                    frame.contentWindow.addEventListener("hashchange", function () {
                        var purl = get_path(window.location);
                        var url = get_path(frame.contentWindow.location);
                        history.replaceState(purl.slice(2) || '/',
                                             frame.contentWindow.document.title,
                                             '/_' + url);
                    });

                    if (!is_changing) {
                        document.title = frame.contentWindow.document.title;
                        var purl = get_path(window.location);
                        var url = get_path(frame.contentWindow.location);
                        history.replaceState(purl.slice(2) || '/',
                                             frame.contentWindow.document.title,
                                             '/_' + url);
                    }
                    is_changing = false;
                }

                frame.addEventListener("load", frame_changed);

                window.addEventListener('popstate', function (event) {
                    if (event.state) {
                        is_changing = true;
                        frame.contentWindow.location = event.state;
                    }
                });

                frame.contentWindow.location = url.slice(2) || '/';

                function wait() {
                    fetch('http://' + window.location.host + '/_reload')
                    .then(function (response) {
                        if (response.ok) {
                            if (response.status == 200) {
                                frame.contentWindow.location.reload(true);
                            }
                            wait();
                        } else {
                            setTimeout(wait, 3000);
                        }
                    })
                    .catch(function () {
                        setTimeout(wait, 3000);
                    });
                }

                wait();
            }
            init();
        </script>
    </body>
    </html>
    '''

    class Handler(SimpleHTTPRequestHandler):
        async_request = False
        def copyfile(self, src, dest):
            if type(src) is io.BytesIO:
                dest.write(src.read())
                dest.flush()
            else:
                os.sendfile(dest.fileno(), src.fileno(), 0, os.fstat(src.fileno()).st_size)

        def do_GET(self):
            if self.path.startswith('/_reload'):
                self.async_request = True
                requests.add(self)
            elif self.path.startswith('/_/'):
                self.frame()
            else:
                super().do_GET()

        def end_headers(self):
            self.send_header('Cache-Control', 'no-cache')
            super().end_headers()

        def frame(self):
            self.send_response(HTTPStatus.OK)
            self.send_header("Content-type", 'text/html')
            self.send_header("Content-Length", str(len(FRAME)))
            self.end_headers()
            self.wfile.write(FRAME)

        def reload(self, status):
            self.setup()
            self.send_response(status)
            self.send_header("Content-type", 'text/plain')
            self.send_header("Content-Length", '0')
            self.end_headers()
            self.finish()


    def send_reload_status(server):
        while True:
            if not eset.wait(30):
                status = HTTPStatus.NO_CONTENT
            else:
                status = HTTPStatus.OK

            for r in list(requests):
                requests.discard(r)
                try:
                    r.reload(status)
                    server.shutdown_request(r)
                except OSError as e:
                    log.error(e)


    class Server:
        def __init__(self, host, port, Handler):
            self.Handler = Handler
            self.sock = socket.socket()
            self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.sock.bind((host, port))

        def serve_forever(self):
            self.sock.listen(100)
            while True:
                conn, addr = self.sock.accept()
                try:
                    h = self.Handler(conn, addr, None)
                except KeyboardInterrupt:
                    raise
                except Exception as e:
                    logging.exception(e)
                if not h.async_request:
                    self.shutdown_request(h)

        def shutdown_request(self, r):
            conn = r.request
            try:
                conn.shutdown(socket.SHUT_WR)
            except OSError:
                pass
            conn.close()


    def serve_main():
        host, _, port = args.bind.partition(':')
        if not host:
            host = '0.0.0.0'

        if not port:
            port = 8080
        port = int(port)

        server = Server(host, port, partial(Handler, directory=args.root))
        st = Thread(target=send_reload_status, args=(server,), daemon=True)
        st.start()

        sa = server.sock.getsockname()
        serve_message = "Serving live server on http://{host}:{port}/_/ ..."
        print(serve_message.format(host=sa[0], port=sa[1]))
        server.serve_forever()

    serve_main()


def strip_dot(path):
    if path.startswith(b'./'):
        return path[2:]
    return path


def compile_exclude(patterns):
    import re
    import fnmatch
    result = [os.fsencode(fnmatch.translate(it)) for it in patterns]
    return re.compile(b'(%s)' % b'|'.join(result))


def gather_watch_entries(root):
    if not os.path.isdir(root):
        return [root]
    return [root] + [strip_dot(os.path.join(r, d))
                     for r, dirs, _ in os.walk(root)
                     for d in dirs]


def monitor(watch_list, exclude_list, on_change):
    if exclude_list:
        ex_re = compile_exclude(exclude_list)
    else:
        ex_re = None

    def filter_files(names):
        if not ex_re:
            return names
        return [it for it in names if it == b'.' or not ex_re.match(it)]

    fnames = []
    for w in watch_list:
        fnames.extend(filter_files(gather_watch_entries(os.fsencode(w))))

    fd = inotify_init()
    changes = get_changes(fd, fnames)
    for e in changes:
        e = filter_files(e)
        if not e:
            select.select([fd], [], [])
            continue
        else:
            on_change()
            next(changes)


class EventSet:
    def __init__(self):
        self.events = set()

    def wait(self, timeout):
        e = Event()
        self.events.add(e)
        res = e.wait(timeout)
        self.events.remove(e)
        return res

    def set(self):
        for e in list(self.events):
            e.set()


def cleanup_processes():
    for p in processes:
        p.terminate()

    deadline = time.time() + 5
    while processes and time.time() < deadline:
        for p in list(processes):
            if p.poll():
                processes.remove(p)
        time.sleep(0.1)

    for p in processes:
        p.kill()

    sys.exit(0)


def main():
    import argparse
    parser = argparse.ArgumentParser(
        prog='on-change',
        usage='on-change [-e exclude-pattern ...] [file|dir ...] -- sub-cmd [args] ...')

    subparsers = parser.add_subparsers(dest='sname')
    p = subparsers.add_parser('run')
    p.add_argument('command')
    p.add_argument('arg', nargs='*')

    p = subparsers.add_parser('daemon')
    p.add_argument('command')
    p.add_argument('arg', nargs='*')

    p = subparsers.add_parser('serve')
    p.add_argument('-b', '--bind', default='127.0.0.1:8080',
                   metavar='[host][:port]', help='bind to interface')
    p.add_argument('root', metavar="document-root", nargs='?', help='Web root')

    p = subparsers.add_parser('on-change')
    p.add_argument('watch', nargs='*', metavar='file|dir')
    p.add_argument('-e', dest='exclude', action='append', metavar='pattern',
                   help='exclude wildcard', default=[])

    rest = sys.argv[1:]
    arg_parts = []
    while rest:
        try:
            idx = rest.index('--')
        except ValueError:
            arg_parts.append(rest)
            rest = []
        else:
            arg_parts.append(rest[:idx])
            rest = rest[idx+1:]

    if not arg_parts:
        arg_parts.append([])
    arg_parts[0].insert(0, 'on-change')

    run_list = []
    daemon_list = []
    watch_list = []
    exclude_list = []
    eset = EventSet()

    for part in arg_parts:
        args, rest = parser.parse_known_args(part)
        if args.sname == 'run':
            run_list.append((oneshot, ([args.command] + args.arg + rest,)))
        elif args.sname == 'daemon':
            daemon_list.append((daemon, (eset, [args.command] + args.arg + rest)))
        elif args.sname == 'serve':
            daemon_list.append((serve, [eset, args]))
        elif args.sname == 'on-change':
            exclude_list.extend(args.exclude)
            if args.watch:
                watch_list.extend(args.watch)
            else:
                watch_list.append('.')

    if not run_list and not daemon_list:
        parser.print_help()
        sys.exit(1)

    def on_change():
        for fn, args in run_list:
            if not fn(*args):
                break
        eset.set()

    signal.signal(signal.SIGINT, lambda s, f: cleanup_processes())
    signal.signal(signal.SIGTERM, lambda s, f: cleanup_processes())

    on_change()

    # Run daemons and wait some time prevent false changes
    for fn, args in daemon_list:
        Thread(target=fn, args=args, daemon=True).start()
    if daemon_list:
        time.sleep(1)

    monitor(watch_list, exclude_list, on_change)


if __name__ == '__main__':
    main()
