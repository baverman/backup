diff -aur orig/gatotray-4218cadee76b/gatotray.c src/gatotray-4218cadee76b/gatotray.c
--- orig/gatotray-4218cadee76b/gatotray.c	2014-07-31 13:06:11.000000000 +0400
+++ src/gatotray-4218cadee76b/gatotray.c	2015-07-10 23:15:37.816761899 +0300
@@ -40,8 +40,6 @@
 
 typedef struct {
     CPU_Usage cpu;
-    int freq;
-    int temp;
 } CPUstatus;
 
 CPUstatus* history = NULL;
@@ -58,14 +56,6 @@
 }
 
 GdkGC *gc = NULL;
-GdkPoint Termometer[] = {{2,16},{2,2},{3,1},{4,1},{5,2},{5,16},{6,17},{6,19},{5,20},
-    {2,20},{1,19},{1,17},{2,16}};
-#define Termometer_tube_size 6 /* first points are the 'tube' */
-#define Termometer_tube_start 2
-#define Termometer_tube_end 16
-#define Termometer_scale 22
-GdkPoint termometer_tube[Termometer_tube_size];
-GdkPoint termometer[sizeof(Termometer)/sizeof(*Termometer)];
 
 void redraw(void)
 {
@@ -75,12 +65,6 @@
     for(int i=0; i<width; i++)
     {
         CPUstatus* h = &history[width-1-i];
-        unsigned shade = h->freq * 99 / SCALE;
-
-        /* Or shade by temperature:
-        shade = h->temp > 0 ? (h->temp < 100 ? h->temp : 99) : 0;
-        gdk_gc_set_rgb_fg_color(gc, &temp_gradient[shade]);
-        */
 
         /* Bottom blue strip for i/o waiting cycles: */
         int iow_size = h->cpu.iowait*width/SCALE;
@@ -90,31 +74,10 @@
             gdk_draw_line(pixmap, gc, i, bottom, i, width);
         }
 
-        gdk_gc_set_rgb_fg_color(gc, &freq_gradient[shade]);
+        gdk_gc_set_rgb_fg_color(gc, &freq_gradient[0]);
         gdk_draw_line(pixmap, gc, i, bottom-(h->cpu.usage*width/SCALE), i, bottom);
     }
 
-    int T = history[0].temp;
-    if(T) /* Hide if 0, meaning it could not be read */
-    if( T<pref_temp_alarm || (timer&1) ) /* Blink when hot! */
-    {
-        /* scale temp from 5~105 degrees Celsius to 0~100*/
-        T = (T-5)*100/100;
-        if(T<0) T=0;
-        if(T>99) T=99;
-        gdk_gc_set_rgb_fg_color(gc, &temp_gradient[T]);
-        gdk_draw_polygon(pixmap, gc, TRUE, termometer, sizeof(termometer)/sizeof(*termometer));
-        if( T<99 )
-        {
-            termometer_tube[0].y = (T*termometer[1].y+(99-T)*termometer[0].y)/99;
-            termometer_tube[Termometer_tube_size-1].y = termometer_tube[0].y;
-            gdk_gc_set_rgb_fg_color(gc, &bg_color);
-            gdk_draw_polygon(pixmap, gc, TRUE, termometer_tube, Termometer_tube_size);
-        }
-        gdk_gc_set_rgb_fg_color(gc, &fg_color);
-        gdk_draw_lines(pixmap, gc, termometer, sizeof(termometer)/sizeof(*termometer));
-    }
-
     GdkPixbuf *pixbuf =
     gdk_pixbuf_get_from_drawable(NULL, pixmap, NULL, 0, 0, 0, 0, width, width);
     if(pref_transparent) {
@@ -145,16 +108,6 @@
     gc = gdk_gc_new(pixmap);
     gdk_gc_set_line_attributes(gc, 1, GDK_LINE_SOLID, GDK_CAP_NOT_LAST, GDK_JOIN_MITER);
 
-    for(int i=0; i<sizeof(termometer)/sizeof(*termometer); i++)
-    {
-        termometer[i].x = Termometer[i].x*newsize/Termometer_scale;
-        termometer[i].y = Termometer[i].y*newsize/Termometer_scale;
-        if(i<Termometer_tube_size) {
-            termometer_tube[i].x = termometer[i].x;
-            termometer_tube[i].y = termometer[i].y;
-        }
-    }
-
     redraw();
     return TRUE;
 }
@@ -174,25 +127,17 @@
 
         smear(history[i].cpu.usage, history[i-1].cpu.usage);
         smear(history[i].cpu.iowait, history[i-1].cpu.iowait);
-        smear(history[i].freq, history[i-1].freq);
-        smear(history[i].temp, history[i-1].temp);
 
         #undef smear
         i--;
     }
     history[0].cpu = cpu_usage(SCALE);
-    int freq = cpu_freq();
-    history[0].freq = !(scaling_max_freq-scaling_min_freq) ? 0
-                      : (freq - scaling_min_freq) * SCALE / (scaling_max_freq-scaling_min_freq);
-    history[0].temp = cpu_temperature();
 
     redraw();
 
     gchar* tip =
-    g_strdup_printf(history[0].temp? "CPU %d%% busy @ %d MHz, %d%%wa\nTemperature: %d C"
-        : "CPU %d%% busy @ %d MHz, %d%%wa"
-        , history[0].cpu.usage*100/SCALE, freq/1000, history[0].cpu.iowait*100/SCALE
-        , history[0].temp);
+    g_strdup_printf("CPU %d%% busy, %d%%wa\n", history[0].cpu.usage*100/SCALE,
+        history[0].cpu.iowait*100/SCALE);
     gtk_status_icon_set_tooltip(app_icon, tip);
     g_free(tip);
 
@@ -257,8 +202,6 @@
 
     history = g_malloc(sizeof(*history));
     history[0].cpu = cpu_usage(SCALE);
-    history[0].freq = 0;
-    history[0].temp = cpu_temperature();
     hist_size = width = 1;
 
     app_icon = gtk_status_icon_new();
